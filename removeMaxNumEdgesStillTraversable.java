package solutions;

import java.util.Arrays;
/**
 * Alice and Bob have an undirected graph of n nodes and 3 types of edges:
 * 
 * <li>Type 1: Can be traversed by Alice only.</li>
 * <li>Type 2: Can be traversed by Bob only.</li>
 * <li>Type 3: Can by traversed by both Alice and Bob.</li>
 * 
 * Given an array edges where edges[i] = [typei, ui, vi] represents a
 * bidirectional edge of type typei between nodes ui and vi, find the maximum
 * number of edges you can remove so that after removing the edges, the graph
 * can still be fully traversed by both Alice and Bob. The graph is fully
 * traversed by Alice and Bob if starting from any node, they can reach all
 * other nodes.
 * 
 * Return the maximum number of edges you can remove, or return -1 if it's
 * impossible for the graph to be fully traversed by Alice and Bob.
 */
public class TraversableRemoval {
	/*
	 * The basic idea here is to first creates a set of Spanning Trees, each of
	 * which connects by BOTH edges. Then, for alice and bob respectively,
	 * taking each of the spanning tree as a node and connecting all nodes
	 * (i.e., unconnected nodes left by the first step and spanning trees that
	 * are considered as nodes) with only their OWN edges as a new spanning
	 * tree.
	 * 
	 * If both alice and bob can connect them successfully. Compute the number
	 * of used edges: the number of BOTH edges used in first step plus the
	 * double of the number of edges needed to connected in the second step.
	 * 
	 * Otherwise, return -1.
	 */

	// This is in fact a set of spanning trees ...
	// I call spanning tree "cc" as "connected components"
	private class CCSet {
		// ccs[node] = 0 : a spanning tree with id "node"
		// ccs[node] = -1 : nothing
		// ccs[node] = i, i > 0, : a spanning tree that has been merged to
		// ccs[i]
		// Wheather a node belongs to a CC can be checked quickly through this
		// array:
		private int[] ccs;
		int numNodes = 0;
		int numCCs = 0;

		CCSet(int n) {
			ccs = new int[n + 1];
			Arrays.fill(ccs, -1);
		}

		CCSet() {
		}

		CCSet copy() {
			CCSet clone = new CCSet();
			clone.ccs = new int[ccs.length];
			clone.numNodes = numNodes;
			clone.numCCs = numCCs;
			System.arraycopy(ccs, 0, clone.ccs, 0, ccs.length);
			return clone;
		}

		int find(int node) {
			if (ccs[node] == -1)
				return -1;
			else {
				// find the cc along the merging pointers:
				while (ccs[node] != 0) {
					node = ccs[node];
				}
				return node;
			}
		}

		// adds an edge n1 <-> n2 into the spanning tree set
		void connect(int n1, int n2) {
			int cc1 = find(n1), cc2 = find(n2);

			if (cc1 == cc2) {
				if (cc1 == -1) {
					// neither node beongs to an existing CC, so
					// create new CC that contains both n1 and n2
					ccs[n1] = 0;
					ccs[n2] = n1;
					numCCs++;
					numNodes += 2;
				}
				// else, n1 & n2 have already been in the same CC
			} else {
				if (cc1 == -1) {
					ccs[n1] = cc2; // n2 belongs to cc2, n1 belongs to nothing
					numNodes++;
				} else if (cc2 == -1) {
					ccs[n2] = cc1; // n1 belongs to cc1, n2 belongs to nothing
					numNodes++;
				} else {
					// n1 and n2 belongs to different CCs, merge CCs
					ccs[cc2] = cc1; // cc2 points to cc1 now
					numCCs--;
				}
			}
		}
	}

	private void firstRound(CCSet ccs, int[][] edges) {
		for (int[] edge : edges) {
			if (edge[0] == 3)
				ccs.connect(edge[1], edge[2]);
		}
	}

	private boolean secondRound(int n, CCSet aliceCCs, CCSet bobCCs,
			int[][] edges) {
		for (int[] edge : edges) {
			if (edge[0] == 1 && (aliceCCs.numCCs > 1 || aliceCCs.numNodes < n))
				aliceCCs.connect(edge[1], edge[2]);

			if (edge[0] == 2 && (bobCCs.numCCs > 1 || bobCCs.numNodes < n))
				bobCCs.connect(edge[1], edge[2]);
		}
		// if connected successfully, there is only one CC in CCSet and the CC
		// contains all nodes.
		return bobCCs.numCCs == 1 && bobCCs.numNodes == n
				&& aliceCCs.numCCs == 1 && aliceCCs.numNodes == n;
	}

	public int maxNumEdgesToRemove(int n, int[][] edges) {
		CCSet alice = new CCSet(n);
		int numEdges;
		int numNodes;
		int numCCs;

		firstRound(alice, edges);
		numNodes = alice.numNodes;
		numCCs = alice.numCCs;
		numEdges = numNodes - numCCs;

		CCSet bob = alice.copy();

		if (secondRound(n, alice, bob, edges)) {
			// compute the removable edges:
			int numDoubleEdges = numCCs + (n - numNodes) - 1;

			return edges.length - (numEdges + numDoubleEdges * 2);
		}
		return -1;
	}

	// testers ....
	public static void main(String[] args) {
		int[][] input = {{3, 1, 2}, {2, 2, 3}, {3, 1, 4}, {2, 3, 5}, {1, 2, 6},
				{2, 4, 7}, {3, 3, 8}, {3, 2, 9}, {2, 1, 10}, {2, 1, 11},
				{1, 11, 12}, {1, 10, 11}, {2, 5, 9}, {2, 7, 10}, {2, 4, 12},
				{3, 9, 10}, {1, 6, 9}, {2, 10, 12}, {1, 2, 5}, {3, 5, 6},
				{1, 7, 11}, {1, 8, 9}, {1, 1, 11}, {3, 4, 5}, {1, 5, 9},
				{2, 4, 9}, {1, 8, 11}, {3, 6, 8}, {1, 8, 10}, {2, 2, 4},
				{2, 3, 8}, {3, 2, 6}, {3, 10, 11}, {2, 3, 11}, {3, 5, 9},
				{3, 3, 5}, {2, 6, 11}, {3, 2, 7}, {1, 5, 11}, {1, 1, 5},
				{2, 9, 10}, {1, 6, 7}, {3, 2, 3}, {2, 8, 9}, {3, 2, 8}};

		// {{1, 1, 2}, {2, 1, 2}};

		// {{3, 1, 2}, {3, 2, 3}, {1, 1, 3}, {1, 2, 4}, {1, 1, 2}, {2, 3, 4}};

		// {{3, 2, 3}, {1, 1, 2}, {2, 3, 4}};

		// {{3, 1, 2}, {3, 2, 3}, {1, 1, 4}, {2, 1, 4}};

		// {{3, 1, 2}, {3, 3, 4}, {1, 1, 3}, {2, 2, 4}};

		// int[][] input = {{1, 1, 2}, {2, 1, 2}, {3, 1, 3}, {1, 1, 4}, {2, 1,
		// 4},
		// {1, 3, 5}, {2, 3, 5}, {1, 1, 6}, {2, 1, 6}, {1, 4, 7},
		// {2, 4, 7}, {1, 5, 8}, {2, 5, 8}, {3, 6, 9}, {3, 1, 10},
		// {3, 9, 11}, {3, 10, 12}, {1, 11, 13}, {2, 11, 13}, {3, 12, 14},
		// {3, 8, 15}, {3, 7, 16}, {1, 15, 17}, {2, 15, 17}, {3, 14, 18},
		// {1, 12, 19}, {2, 12, 19}, {1, 9, 20}, {2, 9, 20}, {3, 5, 21},
		// {3, 11, 22}, {3, 15, 23}, {1, 19, 24}, {2, 19, 24}, {1, 18, 25},
		// {2, 18, 25}, {1, 5, 26}, {2, 5, 26}, {1, 3, 27}, {2, 3, 27},
		// {1, 4, 28}, {2, 4, 28}, {1, 2, 29}, {2, 2, 29}, {1, 19, 30},
		// {2, 19, 30}, {1, 12, 31}, {2, 12, 31}, {1, 10, 32}, {2, 10, 32},
		// {1, 12, 33}, {2, 12, 33}, {3, 30, 34}, {1, 32, 35}, {2, 32, 35},
		// {1, 21, 36}, {2, 21, 36}, {3, 29, 37}, {3, 33, 38}, {3, 6, 39},
		// {1, 21, 40}, {2, 21, 40}, {3, 24, 41}, {1, 3, 42}, {2, 3, 42},
		// {1, 33, 43}, {2, 33, 43}, {3, 2, 44}, {3, 23, 45}, {3, 22, 46},
		// {3, 15, 47}, {1, 7, 48}, {2, 7, 48}, {1, 19, 49}, {2, 19, 49},
		// {1, 4, 50}, {2, 4, 50}, {3, 40, 51}, {1, 35, 52}, {2, 35, 52},
		// {3, 18, 53}, {3, 8, 54}, {1, 37, 55}, {2, 37, 55}, {1, 44, 56},
		// {2, 44, 56}, {1, 43, 57}, {2, 43, 57}, {3, 18, 58}, {3, 52, 59},
		// {1, 52, 60}, {2, 52, 60}, {1, 14, 61}, {2, 14, 61}, {1, 43, 62},
		// {2, 43, 62}, {1, 16, 63}, {2, 16, 63}, {1, 60, 64}, {2, 60, 64},
		// {3, 17, 65}, {3, 57, 66}, {1, 58, 67}, {2, 58, 67}, {3, 26, 68},
		// {3, 62, 69}, {1, 63, 70}, {2, 63, 70}, {1, 45, 71}, {2, 45, 71},
		// {1, 42, 72}, {2, 42, 72}, {1, 31, 73}, {2, 31, 73}, {3, 19, 74},
		// {3, 11, 75}, {1, 29, 76}, {2, 29, 76}, {1, 11, 77}, {2, 11, 77},
		// {3, 71, 78}, {3, 25, 79}, {1, 48, 80}, {2, 48, 80}, {3, 26, 81},
		// {3, 5, 82}, {3, 63, 83}, {1, 73, 84}, {2, 73, 84}, {1, 55, 85},
		// {2, 55, 85}, {1, 9, 86}, {2, 9, 86}, {1, 27, 87}, {2, 27, 87},
		// {1, 50, 88}, {2, 50, 88}, {1, 83, 89}, {2, 83, 89}, {1, 78, 90},
		// {2, 78, 90}, {3, 57, 91}, {1, 42, 92}, {2, 42, 92}, {3, 36, 93},
		// {3, 51, 94}, {1, 68, 95}, {2, 68, 95}, {1, 24, 96}, {2, 24, 96},
		// {1, 59, 97}, {2, 59, 97}, {3, 44, 98}, {3, 9, 99}, {1, 46, 100},
		// {2, 46, 100}, {1, 8, 101}, {2, 8, 101}, {1, 40, 102},
		// {2, 40, 102}, {3, 22, 103}, {1, 80, 104}, {2, 80, 104},
		// {3, 83, 105}, {1, 86, 106}, {2, 86, 106}, {1, 33, 107},
		// {2, 33, 107}, {1, 43, 108}, {2, 43, 108}, {1, 24, 109},
		// {2, 24, 109}, {1, 78, 110}, {2, 78, 110}, {3, 27, 111},
		// {3, 11, 112}, {3, 59, 113}, {1, 72, 114}, {2, 72, 114},
		// {1, 6, 115}, {2, 6, 115}, {1, 103, 116}, {2, 103, 116},
		// {1, 90, 117}, {2, 90, 117}, {3, 107, 118}, {1, 114, 119},
		// {2, 114, 119}, {3, 67, 120}, {3, 12, 121}, {3, 80, 122},
		// {3, 43, 123}, {1, 114, 124}, {2, 114, 124}, {1, 105, 125},
		// {2, 105, 125}, {3, 96, 126}, {3, 104, 127}, {1, 4, 128},
		// {2, 4, 128}, {3, 19, 129}, {3, 121, 130}, {3, 18, 131},
		// {1, 70, 132}, {2, 70, 132}, {1, 117, 133}, {2, 117, 133},
		// {3, 2, 134}, {3, 85, 135}, {1, 52, 136}, {2, 52, 136},
		// {2, 1, 33}, {3, 103, 109}, {2, 1, 113}, {1, 8, 27}, {3, 4, 66},
		// {2, 26, 102}, {3, 9, 55}, {2, 65, 124}, {2, 122, 131},
		// {1, 8, 84}, {3, 68, 129}, {3, 41, 93}, {3, 35, 73},
		// {2, 108, 112}, {1, 73, 105}, {1, 45, 89}, {1, 1, 27},
		// {1, 16, 49}, {1, 21, 101}, {1, 95, 127}, {3, 84, 103},
		// {2, 85, 93}, {2, 54, 77}, {2, 8, 134}, {3, 1, 125}, {2, 56, 89},
		// {1, 77, 128}, {1, 45, 97}, {3, 75, 118}, {2, 18, 28},
		// {1, 18, 63}, {1, 38, 100}, {3, 103, 134}, {3, 94, 111},
		// {2, 17, 23}, {1, 7, 93}, {2, 11, 53}, {3, 7, 136}, {2, 38, 50},
		// {2, 57, 63}, {1, 6, 48}, {1, 65, 76}, {3, 35, 64}, {3, 73, 82},
		// {3, 64, 91}, {2, 31, 134}, {2, 86, 124}, {1, 23, 74},
		// {3, 59, 99}, {1, 31, 45}, {3, 98, 110}, {1, 23, 126},
		// {3, 25, 134}, {3, 110, 120}, {1, 97, 112}, {2, 38, 91},
		// {1, 3, 91}, {1, 17, 79}, {3, 89, 94}, {2, 35, 103},
		// {1, 90, 125}, {2, 6, 72}, {3, 70, 98}, {2, 61, 65},
		// {3, 12, 127}, {2, 14, 50}, {2, 114, 130}, {3, 124, 126},
		// {2, 107, 109}, {2, 102, 111}, {1, 28, 90}, {1, 71, 104},
		// {3, 58, 60}, {1, 57, 132}, {3, 79, 119}, {3, 119, 125},
		// {2, 25, 61}, {2, 56, 84}, {2, 11, 95}, {3, 54, 85},
		// {3, 102, 128}, {3, 1, 64}, {3, 60, 128}, {3, 25, 123},
		// {3, 46, 131}, {3, 2, 92}, {1, 25, 128}, {2, 56, 71},
		// {1, 26, 109}, {1, 2, 111}, {1, 1, 10}, {2, 29, 43},
		// {1, 48, 136}, {2, 38, 129}, {1, 20, 90}, {2, 96, 124},
		// {3, 55, 95}, {2, 7, 15}, {1, 32, 57}, {1, 16, 135},
		// {2, 56, 119}, {1, 61, 108}, {1, 88, 98}, {2, 20, 43},
		// {2, 22, 123}, {1, 2, 77}, {3, 39, 110}, {3, 11, 93}, {2, 5, 17},
		// {2, 16, 21}, {1, 72, 115}, {1, 22, 59}, {1, 23, 134},
		// {1, 96, 108}, {1, 5, 107}, {1, 45, 90}, {1, 103, 121},
		// {2, 41, 107}, {2, 58, 121}, {2, 9, 123}, {1, 24, 63},
		// {2, 27, 80}, {3, 1, 110}, {2, 2, 27}, {1, 30, 102}, {1, 16, 17},
		// {3, 17, 77}, {2, 27, 93}, {3, 53, 62}, {2, 7, 24}, {1, 20, 65},
		// {1, 49, 80}, {3, 109, 120}, {2, 3, 104}, {2, 85, 121},
		// {3, 23, 80}, {1, 60, 116}, {1, 3, 84}, {1, 77, 108},
		// {3, 25, 40}, {2, 50, 121}, {1, 15, 35}, {1, 41, 124},
		// {2, 67, 125}, {3, 74, 101}, {1, 68, 103}, {2, 1, 35},
		// {2, 80, 136}, {3, 5, 27}, {3, 32, 82}, {3, 69, 74}, {1, 70, 87},
		// {3, 54, 136}, {3, 1, 96}, {3, 42, 124}, {2, 56, 131},
		// {3, 107, 121}, {3, 31, 69}, {3, 5, 96}, {3, 23, 90},
		// {2, 49, 75}, {2, 41, 61}, {1, 4, 55}, {1, 20, 74}, {2, 79, 83},
		// {2, 12, 46}, {1, 118, 136}, {3, 87, 88}, {3, 62, 66},
		// {3, 60, 105}, {1, 23, 75}, {3, 32, 87}, {3, 51, 65},
		// {2, 15, 132}, {3, 60, 99}, {1, 119, 130}, {1, 66, 125},
		// {1, 32, 80}, {2, 9, 47}, {2, 45, 109}, {3, 22, 32},
		// {2, 99, 115}, {2, 97, 102}, {3, 22, 34}, {2, 2, 111},
		// {2, 100, 124}, {3, 89, 112}, {2, 34, 103}, {1, 14, 41},
		// {3, 40, 44}, {3, 52, 132}, {1, 47, 60}, {1, 128, 133},
		// {2, 39, 91}, {2, 18, 19}, {3, 68, 124}, {3, 56, 103},
		// {3, 49, 97}, {2, 78, 105}, {1, 32, 75}, {3, 25, 69},
		// {2, 38, 87}, {2, 35, 108}, {1, 24, 135}, {3, 83, 134},
		// {1, 52, 78}, {1, 29, 111}, {3, 97, 109}, {1, 16, 47},
		// {2, 72, 91}, {1, 34, 102}, {1, 64, 123}, {1, 10, 103},
		// {1, 29, 81}, {1, 53, 107}, {2, 51, 73}, {1, 41, 78},
		// {3, 42, 112}, {1, 2, 123}, {2, 36, 39}, {3, 29, 108},
		// {1, 2, 69}, {2, 65, 71}, {2, 60, 86}, {3, 7, 22}, {2, 17, 33},
		// {1, 22, 77}, {2, 94, 108}, {3, 39, 128}, {3, 98, 123},
		// {1, 62, 129}, {2, 49, 80}, {2, 9, 72}, {2, 51, 83},
		// {1, 128, 135}, {2, 86, 115}, {1, 76, 110}, {3, 13, 125},
		// {1, 112, 134}, {3, 52, 109}, {3, 35, 98}, {3, 86, 133},
		// {2, 13, 111}, {2, 13, 65}, {3, 33, 92}, {1, 36, 115},
		// {1, 88, 116}, {1, 66, 94}, {3, 45, 90}, {1, 18, 120},
		// {2, 122, 127}, {3, 57, 77}, {3, 96, 97}, {3, 114, 115},
		// {2, 95, 132}, {3, 59, 61}, {3, 103, 125}, {3, 92, 109},
		// {1, 113, 128}, {2, 24, 75}, {2, 87, 97}, {3, 52, 75},
		// {2, 36, 118}, {2, 1, 136}, {3, 23, 135}, {1, 102, 103},
		// {1, 18, 23}, {1, 33, 58}, {2, 79, 112}, {1, 24, 98},
		// {3, 63, 128}, {2, 29, 81}, {3, 89, 108}, {1, 21, 93},
		// {2, 50, 55}, {1, 6, 70}, {1, 78, 115}, {2, 102, 121},
		// {1, 115, 126}, {2, 16, 81}, {1, 117, 135}, {2, 50, 76},
		// {3, 57, 78}, {3, 33, 54}, {3, 53, 129}, {3, 15, 48},
		// {1, 40, 86}, {3, 51, 60}, {1, 40, 81}};

		// {{3,2,3},{1,1,2},{2,3,4}};
		// // {{3,1,2},
		// {3,2,3},{1,1,4},{2,1,4}};

		// {{3, 1, 2}, {3, 2, 3}, {1, 1, 3}, {1, 2, 4},
		// {1, 1, 2},{2,3,4}};

		int r = new TraversableRemoval().maxNumEdgesToRemove(12, input);

		System.out.println(r);
	}
}
